polygon(c(-4,0,4),c(3.5,5.5,3.5),col="palegreen4",border="palegreen3",lwd=3)
polygon(c(-3,0,3),c(5,6.5,5),col="palegreen3",border="palegreen4",lwd=3)
polygon(c(-2,0,2),c(6.25,7.5,6.25),col="palegreen4",border="palegreen3",lwd=3)
#Add some ornaments
points(x=runif(4,-5,5),y=rep(2,4),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=19)
points(x=runif(4,-4,4),y=rep(3.5,4),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=19)
points(x=runif(4,-3,3),y=rep(5,4),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=19)
points(x=runif(4,-2,2),y=rep(6.25,4),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=19)
points(0,7.5,pch=8,cex=5,col="gold",lwd=3)
# Add some presents
xPres = runif(10,-4.5,4.5)
xWidth = runif(10,0.1,0.5)
xHeight=runif(10,0,1)
for(i in 1:10){
rect(xPres[i]-xWidth[i],0,xPres[i]+xWidth[i],xHeight[i],col=sample(c("blue","red"),size=1))
rect(xPres[i]-0.2*xWidth[i],0,xPres[i]+0.2*xWidth[i],xHeight[i],col=sample(c("gold","grey87"),size=1))
}
sessionInfo()
library("DESeq2")
library("limma")
library("Rsubread")
library(ggplot2)
library("ggplot2")
library(GenomicRanges)
library(rtracklayer)
library(Rsubread)
library(DESeq2)
library("RColorBrewer")
library(gplots)
library(reshape2)
library(goseq)
library(biomaRt)
library(rtracklayer)
library(BSgenome)
library(ChIPpeakAnno)
sessionInfo()
write.table(sessionInfo(),file="/Volumes/PANMAC/MRC/sessioninfo.txt")
haha<-sessionInfo()
haha
class(haha)
writeLines(haha, sep="\n" ,file="/Volumes/PANMAC/MRC/sessioninfo.txt")
writeLines(haha, sep="\n")
haha
library(ChIPQC)
baseDir <- "/CSC/project/chip-seq/sorroin_chip/chip_pipe_newname"
SampleSheet <- "/CSC/project/chip-seq/sorroin_chip/chip_pipe_newname/Pipelinesamplesheet.txt"
organism <- "mm9"
ss <- read.delim(SampleSheet,sep="\t",header=T)
ss
head(ss)
ss <- read.delim(SampleSheet,sep="\t",header=F)
ss
if(organism == "mm9"){
chromosomes=c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chrX","chrY")
blklist <- "/CSC/project/chip-seq/sorroin_chip/chip_pipeline/mm9-blacklist.bed"
}else{
blklist <- NULL
chromosomes=NULL
}
bamFiles <- dir(file.path(baseDir,"AlignedData"),pattern="*.DupMarked\\.bam$",full.name=T)
bamBase <- gsub("DupMarked\\.bam","",basename(bamFiles))
bamFrame <- cbind(bamBase,bamFiles)
peaks <-  dir(file.path(baseDir,"Macs"),pattern="*_peaks.bed$",full.name=T)
peaksBase <- gsub("_WithInput.*","",basename(peaks))
peakFrame <- cbind(peaksBase,peaks)
ss <- ss[ss[,11] == "Report",]
ssFrame <- merge(ss[,c(2,4,6,7,8,9,10,11)]
,merge(bamFrame,peakFrame,by=1,all.x=T,all.y=F)
,by=1,all.x=F,all.y=F)
ss
ssFrame <- merge(ss[,c(2,4,6,7,8,9,10,11)]
,merge(bamFrame,peakFrame,by=1,all.x=T,all.y=F)
,by=1,all.x=F,all.y=F)
bamControl <- vector("character",length=nrow(ssFrame))
for(i in 1:nrow(ssFrame)){
if(any(ssFrame[,1] %in% ssFrame[i,2])){
bamControl[i] <- as.vector(ssFrame[ssFrame[,1] %in% ssFrame[i,2],9])
}else{
bamControl[i] <- NA
}
}
ssFrame
SS2 <- data.frame(
SampleID=as.vector(ssFrame[,1]),
Tissue=as.vector(ssFrame[,3]),
Factor=as.vector(ssFrame[,4]),
Condition=as.vector(ssFrame[,5]),
Treatment=as.vector(ssFrame[,6]),
Replicate=as.vector(ssFrame[,7]),
bamReads=as.vector(ssFrame[,9]),
bamControl=bamControl,
ControlID=as.vector(ssFrame[,2]),
Peaks=as.vector(ssFrame[,10]),
PeakCaller=c(rep("macs",nrow(ssFrame)))
#Peaks=c(rep(NA,7))
)
SS2
opts_chunk$set(cache=TRUE)
?ddsLRT
library(edgeR)
library(DESeq2)
?"DESeq"
48299773+17061693+26723443
48299773+26723443
?cor
?hclust
library(DESeq2)
?DEseq
?DESeq
217+186+674
sessionInfo()
source("https://bioconductor.org/biocLite.R")
biocLite("scater")
install.packages("devtools")
devtools::install_github("davismcc/scater", build_vignettes = TRUE)
devtools::install_github("davismcc/scater", ref = "release-R-3.2", build_vignettes = T)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("davismcc/scater", ref = "release-R-3.2", build_vignettes = TRUE)
devtools::install_github("davismcc/scater", ref = "release-R-3.2", build_vignettes = TRUE, force = TRUE)
install.packages(c("data.table", "ggplot2", "knitr", "matrixStats", "MASS","plyr", "reshape2", "rjson", "testthat", "viridis"))
install.packages(c("data.table", "ggplot2", "knitr", "matrixStats",
library(DESeq2)
?result
?results
?DESeq
cnts <- matrix(rnbinom(n=1000, mu=100, size=1/0.5), ncol=10)
cond <- factor(rep(1:2, each=5))
# object construction
dds <- DESeqDataSetFromMatrix(cnts, DataFrame(cond), ~ cond)
# standard analysis
dds <- DESeq(dds)
res <- results(dds)
# an alternate analysis: likelihood ratio test
ddsLRT <- DESeq(dds, test="LRT", reduced= ~ 1)
resLRT <- results(ddsLRT)
dds
res
str(dds)
assays(dds)
assays(dds)$counts
ddsLRT
dds
resLRT
rld <- rlog(dds)
rld
rowData(rld)
head(assay(rld))
dds
dds$counts
assay(dds)
assay(dds)$count
assay(dds)
dds
dds
assay(dds)
assay(dds)$normalised
assay(dds,normalize=T)
haha<-count(dds, normalized=T)
?count
library("DESEQ2")
library(DESeq2)
?counts
haha<-counts(dds, normalized=T)
head(haha)
4251+6230+1221
5200+6503
library("regioneR")
?getGenomeAndMask
hela_repli<-read.table(file="/CSC/project/Stephan/loop_domain/rawdata/replichip/RT_HeLaS3_Cervical_Carcinoma_All_forR.txt",sep="\t",header=T)
hela_repli_GR <- with(hela_repli, GRanges(Chromosome, IRanges(Start_Position, End_Position), strand="*"))
hela_repli_GR$Data_Value<-hela_repli$Data_Value
hela_repli_GR_early<-hela_repli_GR[hela_repli_GR$Data_Value>0,]
hela_repli_GR_early<-toDataframe(hela_repli_GR_early)
dir_blacklist="/CSC/project/chip-seq/rawdata/blacklist/hg19_blacklist.bed"
blacklist<-import(dir_blacklist)
hela_repli_GR <- with(hela_repli, GRanges(Chromosome, IRanges(Start_Position, End_Position), strand="*"))
hela_repli_GR$Data_Value<-hela_repli$Data_Value
hela_repli_GR_early<-hela_repli_GR[hela_repli_GR$Data_Value>0,]
hela_repli_GR_early
blacklist
repliEarly_OLBL<-findOverlaps(hela_repli_GR_early,blacklist)
head(repliEarly_OLBL)
repliEarly_rmBL<-hela_repli_GR_early[!unique(queryHits(repliEarly_OLBL)),]
length(repliEarly_rmBL)
head(repliEarly_OLBL)
length(hela_repli_GR_early)
length(unique(queryHits(repliEarly_OLBL)))
repliEarly_BL<-hela_repli_GR_early[unique(queryHits(repliEarly_OLBL)),]
repliEarly_BL
length(225)
length(repliEarly_BL)
length(!unique(queryHits(repliEarly_OLBL)))
length(unique(queryHits(repliEarly_OLBL)))
unique(queryHits(repliEarly_OLBL))
repliEarly_rmBL<-hela_repli_GR_early[-unique(queryHits(repliEarly_OLBL)),]
length(repliEarly_rmBL)
length(repliEarly_BL)
repliEarly_BL
repliEarly_BL<-hela_repli_GR_early[unique(queryHits(repliEarly_OLBL))]
repliEarly_rmBL<-hela_repli_GR_early[-unique(queryHits(repliEarly_OLBL))]
length(repliEarly_BL)
length(repliEarly_rmBL)
repliEarly_rmBL
?apply
library("UsingR")
install.packages("UsingR")
library("UsingR")
data(age.universe)
class(age.universe)
dim(age.universe)
age.universe
data(aosat)
aosat
head(aosat)
dim(aosat)
data(baycheck)
baycheck
head()baycheckd
head(baycheck)
plot(Nt ~ year,baycheck)
data(blood)
blood
cor(blood$Machine,blood$Expert)
plot(blood)
library("UsingR")
data(blood)
head(blood)
?cor
cor(blood$Machine,blood$Expert)
lm(Expert~Machine,blood)
data(iris)
head(iris)
iris4cor<-iris[,c(1:4)];
head(iris4cor)
cor(iris4cor)
image(cor(iris4cor),axes=F)
mtext(colnames(iris4cor),side=2,at=seq(0,1,length.out=4),las=1,cex=0.8)
mtext(colnames(iris4cor),side=1,at=seq(0,1,length.out=4),las=2,cex=0.8)
p <- ggplot(blood, aes(Expert, Machine))
p + geom_point()
p + geom_point()+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
cor(iris4cor)
p <- ggplot(blood, aes(Expert, Machine))
p + geom_point()+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
geom_smooth(formula=Machine~Expert)
p + geom_point()+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
stat_smooth(method = "lm")
?stat_smooth
p + geom_point()+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
stat_smooth(method = "lm",se=F)
data(cancer)
cancer
data(cfb)
cfb
head(cfb)
data(chicken)
dim(chicken)
head(chicken)
boxplot(chicken)
anova(boxplot(chicken))
anova(chicken)
dim(boxplot(chicken))
dim(chicken)
class(chicken)
data(emissions)
dim(emissions)
head(emissions)
plot(emissions)
data(fat)
head(fat)
data(galileo)
head(galileo)
data(healthy)
head(healthy)
head(healthy)
data(kid.weights)
kid.weights
head9kid.weights)
head(kid.weights)
class(kid.weights$gender)
levels(kid.weights$gender)
ftable(kid.weights$gender)
class(kid.weights$gender)
pk <- ggplot(kid.weights, aes(factor(gender), height))
pk + geom_boxplot()
pk <- ggplot(kid.weights, aes(factor(gender), weight))
pk + geom_boxplot()
pwh <-  ggplot(kid.weights[kid.weights$gender=="M",], aes(factor(gender), weight))
pwh + geom_point()
pwh <-  ggplot(kid.weights[kid.weights$gender=="M",], aes(height, weight))
pwh + geom_point()
pwh <-  ggplot(kid.weights, aes(height, weight))
pwh + geom_point()
pwh <-  ggplot(kid.weights, aes(height, weight))
pwh + geom_point(aes(colour = factor(gender)))
pwh <-  ggplot(kid.weights, aes(height, weight))
pwh + geom_point(aes(colour = factor(gender))) +
stat_smooth(method = "lm")
dim(kid.weights)
head(kid.weights)
pairs(kid.weights[,-4])
cor(kid.weights[,-4])
data(KSI)plot(KSI)
data(KSI)
plot(KSI)
head(KSI))
head(KSI)
class(KSI)
data(ObamaApproval)
ObamaApproval
head(ObamaApproval)
data(emissions)
attach(emissions)
scatter.with.hist(perCapita,CO2)
head(emissions)
scatter.with.hist(kid.weights$weight,kid.weights$height)
scatter.with.hist(kid.weights$height,kid.weights$weight)
?scatter.with.hist
scatter.with.hist(kid.weights$height,kid.weights$weight
xlab="height",ylab="weight")
scatter.with.hist(kid.weights$height,kid.weights$weight)
title(xlab="height",ylab="weight")
fat
head(fat)
cor(fat[,c("weight","height")])
cor(fat[,c("body.fat","weight","height")])
pfat<-ggplot(fat,aes(weight,body.fat))
pfat + geom_point()
library("UsingR")
data(kid.weights)
head(kid.weights)
str(kid.weights)
lmResult<-lm(formula = weight ~ height, data = kid.weights)
lmResult
lmResult$coefficients
KidLm.res<-lmResult$residual
head(KidLm.res)
plot(kid.weights$height,KidLm.res,ylim=c(-2.5,2.5),
ylab="residuals",xlab="Petal Width of Iris.versicolor (x)")
plot(kid.weights$height,KidLm.res,#ylim=c(-2.5,2.5),
ylab="residuals",xlab="height (X)")
abline(h=0,col="blueviolet",lwd=3, lty=3)
diff_df<-kid.weights$weight-mean(kid.weights$weight)
diff_df
diff_df<-kid.weights$weight-mean(kid.weights$weight)
plot(kid.weights$weight, #ylim=c(2,6.5),
ylab="Petal Length of first 4 data points (y)", xlab="x")
segments(x0=c(1:50),y0=kid.weights$weight,
x1=c(1:50),y1=mean(kid.weights$weight),col="brown",lwd=3)
rank(kid.weights$weight)
order(kid.weights$weight)
kid.weights$weight
class(kid.weights$weight)
head(kid.weights)
length(kid.weights$weight)
head(kid.weights$height)
length(kid.weights$height)
diff_df<-kid.weights$weight-mean(kid.weights$weight)
plot(kid.weights$weight, #ylim=c(2,6.5),
ylab="weight (y)", xlab="x")
abline(h=mean(kid.weights$weight),
col="forestgreen",lwd=3,lty=3)
segments(x0=c(1:50),y0=kid.weights$weight,
x1=c(1:50),y1=mean(kid.weights$weight),col="brown",lwd=3)
plot(kid.weights$weight, xlim=c(0,50),
ylab="weight (y)", xlab="x")
abline(h=mean(kid.weights$weight),
col="forestgreen",lwd=3,lty=3)
segments(x0=c(1:50),y0=kid.weights$weight,
x1=c(1:50),y1=mean(kid.weights$weight),col="brown",lwd=3)
segments(x0=c(1:100),y0=kid.weights$weight,
x1=c(1:100),y1=mean(kid.weights$weight),col="brown",lwd=3)
plot(kid.weights$weight, xlim=c(0,100),
ylab="weight (y)", xlab="x")
abline(h=mean(kid.weights$weight),
col="forestgreen",lwd=3,lty=3)
segments(x0=c(1:100),y0=kid.weights$weight,
x1=c(1:100),y1=mean(kid.weights$weight),col="brown",lwd=3)
plot(kid.weights$weight, xlim=c(0,100),
ylab="weight (y)", xlab="x")
abline(h=mean(kid.weights$weight),
col="forestgreen",lwd=3,lty=3)
#rect(xleft=c(1:4),ybottom=mean(iris_versi$Petal.Length),
#     xright=c(1:4)+abs(diff_df[c(1:4)]),
#     ytop=mean(iris_versi$Petal.Length)+diff_df[c(1:4)],
#     density=30,col = "blue")
segments(x0=c(1:100),y0=kid.weights$weight[c(1:100)],
x1=c(1:100),y1=mean(kid.weights$weight)[c(1:100)],col="brown",lwd=3)
segments(x0=c(1:100),y0=kid.weights$weight[c(1:100)],
x1=c(1:100),y1=mean(kid.weights$weight),col="brown",lwd=3)
head(kid.weights)
library(UsingR)
data(kid.weights)
head(kid.weights)
new_kid_heigth<-c(23,40,66)
new_kid_height<-c(23,40,66)
lmResult$coefficients
lmResult$coefficients
data(kid.weights)
str(kid.weights)
head(kid.weights)
lmResult$coefficients
lmResult<-lm(formula = weight ~ height, data = kid.weights)
lmResult
lmResult$coefficients
beta0<-lmResult$coefficients[1]
beta1<-lmResult$coefficients[2]
predicted_new_kid_weight<-beta0+beta1*new_kid_height
predicted_new_kid_weight
?predict
cleaver_predicted_kid_weight<-predict(new_kid_height,lmResult)
cleaver_predicted_kid_weight<-predict(lmResult,new_kid_height)
cleaver_predicted_kid_weight<-predict(lmResult)
head(cleaver_predicted_kid_weight)
new.df <- data.frame(Total=new_kid_height)
cleaver_predicted_kid_weight<-predict(lmResult,new.df)
predict(lmResult,new.df)
new.df <- data.frame(height=new_kid_height)
cleaver_predicted_kid_weight<-predict(lmResult,new.df)
cleaver_predicted_kid_weight
new_kid_height_df <- data.frame(height=c(23,40,66))
cleaver_predicted_kid_weight<-predict(lmResult,new_kid_height_df)
beta0<-lmResult$coefficients[1]
beta1<-lmResult$coefficients[2]
beta0
predicted_new_kid_weight<-beta0+beta1*new_kid_height
predicted_new_kid_weight
diff_df<-kid.weights$weight-mean(kid.weights$weight)
plot(kid.weights$weight, ylim=c(-30,150),
ylab="rediduals (weight pounds)", xlab="x")
abline(h=mean(kid.weights$weight),
col="forestgreen",lwd=3,lty=2)
par(mfrow=c(2,1))
hist(Life_exp$life.expectancy,breaks=10,freq = F,xlim=range(Life_exp$life.expectancy))
lines(density(Life_exp$life.expectancy),col="red",lwd=3)
boxplot(Life_exp$life.expectancy,ylab="Life expectancy (Years)",horizontal=T, ylim=range(Life_exp$life.expectancy))
abline(v=mean(Life_exp$life.expectancy),col="forestgreen",lwd=3)
setwd("/CSC/workshop/StatisticsInR/Statistics2016")
Life_exp<-read.csv("data/Life_expectancy_at_birth.csv",header=T)
data(chicken)
library("UsingR")
data(chicken)
head(chicken)
dim(chicken)
var(chicken$Ration1)
var(chicken$Ration2)
var(chicken$Ration3)
Fratio<-var(chicken$Ration1)/var(chicken$Ration2)
Fratio
df_Ration1<-13-1
df_Ration2<-13-1
qf(c(0.025,0.975),df1=df_Ration1, df2=df_Ration2)
qf(0.05,df1=df_Ration1, df2=df_Ration2)
qf(0.05,df1=df_Ration1, df2=df_Ration2,lower.tail = F)
qf(0.025,df1=df_Ration1, df2=df_Ration2,lower.tail = F)
qf(0.025,df1=df_Ration1, df2=df_Ration2,lower.tail = T)
df_Ration2
pf(c(0.025,0.975),df1=df_Ration1, df2=df_Ration2)
pf(1.8352,df1=df_Ration1, df2=df_Ration2)
pf(1.8352,df1=df_Ration1, df2=df_Ration2,lower.tail = F)
?pf
qf(0.95,df1=df_Ration1, df2=df_Ration2)
qf(0.05,df1=df_Ration1, df2=df_Ration2)
qf(c(0.025,0.975),11,8)
Fratio<-var(chicken$Ration1)/var(chicken$Ration2)
Fratio
df_Ration1<-13-1
df_Ration2<-13-1
pf(Fratio,df1=df_Ration1, df2=df_Ration2)
Fratio
pf(Fratio,df1=df_Ration1, df2=df_Ration2,lower.tail = F)
library("UsingR")
data(chicken)
head(chicken)
dim(chicken)
var.test(chicken$Ration1,chicken$Ration2)
qf(c(0.025,0.975),df1=df_Ration1, df2=df_Ration2)
?var.test
var.test(chicken$Ration1,chicken$Ration2,alternative="two.sided")
qf(c(0.025,0.975),df1=df_Ration1, df2=df_Ration2)
x <- c (1973, 403, 509, 2103, 1153  292, 1916, 1602, 1559, 547, 801, 359)
y <- c (1185, 885, 2955, 815, 2852, 1217, 1762, 2592, 1632)
var.test(x,y, alternative = c("two.sided"),  conf.level = 0.95)
x <- c (1973, 403, 509, 2103, 1153  292, 1916, 1602, 1559, 547, 801, 359)
y <- c (1185, 885, 2955, 815, 2852, 1217, 1762, 2592, 1632)
x <- c (1973, 403, 509, 2103, 1153,  292, 1916, 1602, 1559, 547, 801, 359)
y <- c (1185, 885, 2955, 815, 2852, 1217, 1762, 2592, 1632)
var.test(x,y, alternative = c("two.sided"),  conf.level = 0.95)
var.test(chicken$Ration1,chicken$Ration2,conf.level = 0.95)
conf.level
conf.level<-0.95
BETA <- (1 - conf.level)/2
BETA
CINT <- c(Fratio/qf(1 - BETA, df1=df_Ration1, df2=df_Ration2), Fratio/qf(BETA, df1=df_Ration1, df2=df_Ration2))
CINT
conf.level<-0.95
critical_value<-qf(c(0.025,0.975),df1=df_Ration1, df2=df_Ration2)
critical_value
cint1<-Fratio/critical_value
cint1
BETA<-0.05/2
conf.level<-0.95
BETA<- (1-conf.level)/2
c(Fratio/qf(1 - BETA, df1=df_Ration1, df2=df_Ration2), Fratio/qf(BETA, df1=df_Ration1, df2=df_Ration2))
